import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error

st.set_page_config(page_title="Predictive Maintenance", layout="wide")
st.title("üìà ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏¢‡∏≤ / ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà")

# Load data and cache it
@st.cache_data
def load_data():
    data_path = '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Pose Repairman.xlsx'
    sheet_name = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡∏≥‡∏¢‡∏≤'
    df = pd.read_excel(data_path, sheet_name=sheet_name, engine='openpyxl')
    df.rename(columns={
        '‡πÅ‡∏ú‡∏ô‡∏Å': '‡πÅ‡∏ú‡∏ô‡∏Å',
        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        '‡∏õ‡∏±‡∏ç‡∏´‡∏≤': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
        '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏¢‡∏≤ /‡πÅ‡∏ö‡∏ï (‡∏ß‡∏±‡∏ô)': '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)',
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤'
    }, inplace=True)
    df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤'])
    return df

# Train multiple models and cache them
@st.cache_resource
def train_models(df):
    df = df.dropna(subset=['‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤', '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)'])
    encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')
    X = encoder.fit_transform(df[['‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤']])
    y = df['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)']

    models = {
        "Linear Regression": LinearRegression(),
        "Decision Tree": DecisionTreeRegressor(random_state=42),
        "Random Forest": RandomForestRegressor(random_state=42),
        "Gradient Boosting": GradientBoostingRegressor(random_state=42)
    }

    for name in models:
        models[name].fit(X, y)

    return models, encoder

# Predict maintenance duration for new data
def predict_all_models(new_df, models, encoder):
    X_new = encoder.transform(new_df[['‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤']])
    predictions = {}
    for name, model in models.items():
        predictions[name] = model.predict(X_new)
    return predictions

# Main logic
raw_df = load_data()
models, encoder = train_models(raw_df)

# User filters
with st.sidebar:
    st.header("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_departments = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", raw_df['‡πÅ‡∏ú‡∏ô‡∏Å'].unique(), default=raw_df['‡πÅ‡∏ú‡∏ô‡∏Å'].unique())
    selected_machines = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", raw_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'].unique(), default=raw_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'].unique())

# Filtered data
filtered_df = raw_df[
    (raw_df['‡πÅ‡∏ú‡∏ô‡∏Å'].isin(selected_departments)) &
    (raw_df['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'].isin(selected_machines))
]

# Prediction
if not filtered_df.empty:
    filtered_df = filtered_df.copy()
    all_predictions = predict_all_models(filtered_df, models, encoder)

    error_summary = []

    for name, preds in all_predictions.items():
        filtered_df[f'{name} (‡∏ß‡∏±‡∏ô)'] = np.round(preds).astype(int)
        filtered_df[f'{name} ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'] = filtered_df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤'] + pd.to_timedelta(filtered_df[f'{name} (‡∏ß‡∏±‡∏ô)'], unit='D')

        # Calculate error metrics
        mae = mean_absolute_error(filtered_df['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)'], preds)
        rmse = np.sqrt(mean_squared_error(filtered_df['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)'], preds))
        error_summary.append({"Model": name, "MAE": mae, "RMSE": rmse})

    st.success(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(filtered_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    st.dataframe(filtered_df[[
        '‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤', '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ß‡∏±‡∏ô)'
    ] + [col for col in filtered_df.columns if any(m in col for m in models.keys())]]
    .sort_values(by='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤'))

    st.subheader("üìä ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.dataframe(pd.DataFrame(error_summary).sort_values(by="RMSE"))

    for name in all_predictions:
        st.subheader(f"üìâ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ({name})")
        fig = px.timeline(
            filtered_df,
            x_start='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤',
            x_end=f'{name} ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏',
            y='‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
            color='‡πÅ‡∏ú‡∏ô‡∏Å',
            title=f'‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ({name})'
        )
        fig.update_layout(xaxis_title='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', yaxis_title='‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', height=600)
        st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
